<html><head>


<meta http-equiv="Content-Language" content="en-us"><title>Bytecode Version Inspector Application</title>

<link rel="stylesheet" type="text/css" href="BcVerApp_files/basic.css"></head><body>

<p class="NavBar">
<a href="http://alumnus.caltech.edu/%7Eleif/.index.html">Home</a>
-&gt;
<a href="http://alumnus.caltech.edu/%7Eleif/professional.html">Professional</a>
-&gt;
<a href="http://alumnus.caltech.edu/%7Eleif/opensource/bcver/index.html">BcVer</a>
-&gt;
Bytecode Version Inspector App
</p>

<h2><font size="3">Bytecode Version Inspector:</font><br>Command Line Application</h2>

<h3>Description</h3>

<p>Bytecode Version Inspector examines class and jar files for Java version
information. The tool will traverse a directory tree, and can report on
either the individual Java version of each class file, or on the range of
Java versions found in each directory or jar file. The tool is also available
as an <a href="http://alumnus.caltech.edu/%7Eleif/opensource/bcver/BcVerTask.html">Ant task.</a></p>

<p>The application returns a result code of 0 for success, and various
negative numbers for failure of one sort or another.</p>

<p>The application can be configured to produce a report, either to the
console or to a file. The report can be generated in a standard format,
either plain (ASCII text) or XML, or in a custom format.</p>

<h4>Bytecode Versions</h4>

<p>Java bytecode is the encoding used for class files, as output by a Java
compiler. It is versioned separately from the Java language. The following
table gives the bytecode versions that will run on a particular JVM version,
as listed by Sun or determined by experiment.</p>

<div class="TableHolder">
<table border="1" cellpadding="2" cellspacing="0">
    <tbody><tr>
        <td><b>Bytecode Version</b></td>
        <td><b>JVM Version</b></td>
        <td><b>Source</b></td>
    </tr>
    <tr>
        <td>45.0 - 45.3</td>
        <td>1.0.2</td>
        <td><a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75883">Sun</a></td>
    </tr>
    <tr>
        <td>45.0 - 45.65535</td>
        <td>1.1.*</td>
        <td><a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75883">Sun</a></td>
    </tr>
    <tr>
        <td>45.0 - 46.0</td>
        <td>1.2</td>
        <td><a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75883">Sun</a>;
        experiment suggests that some 1.2 JVMs also support 46.3</td>
    </tr>
    <tr>
        <td>45.0 - 47.0</td>
        <td>1.3</td>
        <td>Experiment</td>
    </tr>
    <tr>
        <td>45.0 - 48.0</td>
        <td>1.4</td>
        <td>Experiment</td>
    </tr>
    <tr>
        <td>45.0 - 49.0</td>
        <td>5 (1.5)</td>
        <td>Experiment</td>
    </tr>
</tbody></table>
</div>

<p>With this information, you can inspect your files to make sure they will
run with a particular JVM. For example, if you want a particular jar file to
run with any JVM from version 1.3 or later, you would inspect that jar file
to make sure all bytecode versions for any class files in the jar lie in the
range [45.0 .. 47.0].</p>

<h3>Usage</h3>
<p><i>Windows: </i><br><code>&nbsp;&nbsp;&nbsp;&nbsp;bcver [flags] file [file]*</code></p>
<p><i>Unix: </i><br><code>&nbsp;&nbsp;&nbsp;&nbsp;./bcver.sh [flags] file [file]*</code></p>
<p><i>Java: </i><br><code>&nbsp;&nbsp;&nbsp;&nbsp;java -jar bcver.jar [flags] file [file]*</code></p>

<p>The <code>file</code> arguments control which files are checked for
version information.  If a <code>file</code> argument represents a directory,
all files in that directory are checked, and all files in any subdirectory,
recursively (unless the <code>-f</code> switch has been specified). The
<code>file</code> arguments do <b>not</b> expand wildcard characters.</p>

<div class="TableHolder">
<table border="1" cellpadding="2" cellspacing="0">
    <tbody><tr>
        <td align="center" valign="top"><b>Flag</b></td>
        <td valign="top"><b>Description</b></td>
        <td align="center" valign="top"><b>Required</b></td>
    </tr>
    <tr>
        <td align="center" valign="top">-f</td>
        <td valign="top">("flat") Do not traverse subdirectories when checking
        bytecode version numbers.</td>
        <td rowspan="2" align="center" valign="middle">No; at most one of
        these. Defaults to <code>-r</code></td>
    </tr>
    <tr>
        <td align="center" valign="top">-r</td>
        <td valign="top">Recursively traverse subdirectories when checking
        bytecode version numbers.</td>
    </tr>
    <tr>
        <td align="center" valign="top">+d</td>
        <td valign="top">Print a summary for directories. The summary
        gives the maximum and minimum javacode versions found in class files
        in that directory, but <i>not</i> including subdirectories.</td>
        <td rowspan="2" align="center" valign="middle">No (defaults to
        <code>+d</code>).</td>
    </tr>
    <tr>
        <td align="center" valign="top">-d</td>
        <td valign="top">Do not print a summary for directories.</td>
    </tr>
    <tr>
        <td align="center" valign="top">+j</td>
        <td valign="top">Print a summary for archives (jar files). The summary
        gives the maximum and minimum javacode versions found in class files
        within the archive.</td>
        <td rowspan="2" align="center" valign="middle">No (defaults to
        <code>+j</code>).</td>
    </tr>
    <tr>
        <td align="center" valign="top">-j</td>
        <td valign="top">Do not print a summary for archives (jar files).</td>
    </tr>
    <tr>
        <td align="center" valign="top">+c</td>
        <td valign="top">Print information for individual classes.  Each class
        gives the javacode version for which it was compiled.</td>
        <td rowspan="2" align="center" valign="middle">No (defaults to
        <code>+c</code>).</td>
    </tr>
    <tr>
        <td align="center" valign="top">-c</td>
        <td valign="top">Do not print information for individual classes.</td>
    </tr>
    <tr>
        <td align="center" valign="top">-max=<i>version</i></td>
        <td valign="top">Cause a return code of -2 if any file encountered
        while inspecting version numbers has a version that is greater than
        the given version.</td>
        <td align="center" valign="top">No</td>
    </tr>
    <tr>
        <td align="center" valign="top">-min=<i>version</i></td>
        <td valign="top">Cause a return code of -3 if any file encountered
        while inspecting version numbers has a version that is smaller than
        the given version.</td>
        <td align="center" valign="top">No</td>
    </tr>
    <tr>
        <td align="center" valign="top">-txt[=<i>filename</i>]</td>
        <td valign="top">Produce a text report, writing the results to the file if
        specified, or to standard output if no filename is specified.</td>
        <td align="center" valign="top">No</td>
    </tr>
    <tr>
        <td align="center" valign="top">-xml[=<i>filename</i>]</td>
        <td valign="top">Produce an XML report, writing the results to the file if
        specified, or to standard output if no filename is specified.</td>
        <td align="center" valign="top">No</td>
    </tr>
    <tr>
        <td align="center" valign="top">-rpt=<i>class</i>[=<i>filename</i>]</td>
        <td valign="top">Produce a custom report, writing the results to the file if
        specified, or to standard output if no filename is specified. The custom
        report formatter must implement
        <code>com.bennettconsulting.bcver.ResultFormatter</code>.</td>
        <td align="center" valign="top">No</td>
    </tr>
</tbody></table>
</div>

<p>The file arguments may each be a directory, an archive file, or a class
file. For a class file, the tool reports the file's class version in
<b>major.minor</b> format. Note that the class version does not match the
JVM version that runs it; e.g., 48.0 class version will run on JVM 1.4 but
not on JVM 1.3 or earlier.</p>

<p>For an archive, the tool reports the version number (as above) for each
class file in the archive. Archive files must have a name ending in (Windows:
have file extension of) ".jar", ".war", ".ear", ".zip", or ".sip".</p>

<p>For a directory, the tool reports the version number (as above) for each
class file in the directory, any subdirectories, and any archives in the
directory or subdirectories.</p>

<h3>Examples</h3>
<pre><font color=red style='font-weight:bold'>java -jar bcver.jar -d -j -txt build dist</font></pre>
<pre>&gt;bcver -d -j -txt build dist
48.0 build\java\com\bennettconsulting\bcver\VersionInspector.class
48.0 dist\bcver.jar[com/bennettconsulting/bcver/VersionInspector.class]
</pre>
<p>Check directories <b>build</b> and <b>dist</b> for class file versions.
Write a text-formatted report to the console, do not generate a
summary line for directories, and do not inspect within jar files.</p>

<h3>License</h3>

<p>This tool is distributed under the
<a href="http://alumnus.caltech.edu/%7Eleif/opensource/bcver/LICENSE-2_0">Apache 2.0 License</a>.
The license is also <a href="http://www.apache.org/licenses/LICENSE-2.0">
available on the web</a>.</p>

<p class="copyright">Copyright © 2004, 2005 Leif Bennett.
All rights Reserved.</p>

</body></html>